### This file was automatically generated by Google Gemini from '.\interpolate.sh'.
# BASH to PowerShell Translation
# This script generates 'Library.js' from 'Library_template.js' and modules in the directory '.\modules\'.

$ErrorActionPreference = 'Stop'
$outputFile = '.\Library.js'

# Get the content of the template file.
$templateContent = Get-Content -Path '.\Library_template.js'

# Find the line number of the insertion point.
$insertionIndex = $templateContent | Select-String -Pattern 'YOUR MODULES AUTOMATICALLY IMPORTED HERE' -SimpleMatch | Select-Object -ExpandProperty LineNumber

# Output the content before the insertion point.
$templateContent[0..($insertionIndex - 2)] | Out-File -FilePath $outputFile -Encoding utf8

# Get the list of modules, preferring 'LoadOrder.txt' if it exists.
$moduleNames = if (Test-Path -Path '.\modules\LoadOrder.txt') {
	Get-Content -Path '.\modules\LoadOrder.txt' | Where-Object { -not $_.StartsWith('#') }
} else {
	(Get-ChildItem -Path '.\modules\' -Directory).Name
}

# Output each module.
foreach ($moduleName in $moduleNames) {
	$targetPath = ".\modules\$moduleName"

	# Interpolate the module content into the following form:
	$heredoc = @"
makeMod((() => {
    // Module: $moduleName
    // Initially: $(if (Test-Path -Path "$targetPath\Initially.js") { Get-Content -Path "$targetPath\Initially.js" | Out-String } else { 'true' })
    // Preload
$(if (Test-Path -Path "$targetPath\Preload.js") { Get-Content -Path "$targetPath\Preload.js" | Out-String })
    // Library
$(if (Test-Path -Path "$targetPath\Library.js") { Get-Content -Path "$targetPath\Library.js" | Out-String })
    // Input
$(if (Test-Path -Path "$targetPath\Input.js") { Get-Content -Path "$targetPath\Input.js" | Out-String })
    // Context
$(if (Test-Path -Path "$targetPath\Context.js") { Get-Content -Path "$targetPath\Context.js" | Out-String })
    // Output
$(if (Test-Path -Path "$targetPath\Output.js") { Get-Content -Path "$targetPath\Output.js" | Out-String })
    // End
}).toString())
"@

	# Output the module content.
	$heredoc | Out-File -FilePath $outputFile -Append -Encoding utf8
}

# Output the content after the insertion point.
$templateContent[$insertionIndex..($templateContent.Count - 1)] | Out-File -FilePath $outputFile -Append -Encoding utf8